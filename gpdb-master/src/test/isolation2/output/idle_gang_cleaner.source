-- This test is used to test if the writer gangs will be
-- reused and reader gangs will be cleaned after
-- gp_vmem_idle_resource_timeout. Since we no longer
-- clean up the idle writer gangs after the timeout,
-- no snapshot collision error should occur.

CREATE OR REPLACE FUNCTION cleanupAllGangs() RETURNS BOOL AS '@abs_builddir@/../regress/regress@DLSUFFIX@', 'cleanupAllGangs' LANGUAGE C;
CREATE

create or replace language plpython3u;
CREATE
create extension if not exists gp_inject_fault;
CREATE

CREATE OR REPLACE FUNCTION idle_gang_pressure_test() RETURNS VOID LANGUAGE plpython3u AS $$ from pg import DB 
dbname = plpy.execute("select current_database() db")[0]["db"] db = DB(dbname=dbname) 
db.query("SET gp_vmem_idle_resource_timeout = 1") for i in range(1000): db.query("SELECT count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2);") db.query("RESET gp_vmem_idle_resource_timeout") db.close() $$;
CREATE

set gp_vmem_idle_resource_timeout to '0.5s';
SET
set gp_snapshotadd_timeout to 0;
SET

create table target_session_id_t(target_session_id int) DISTRIBUTED REPLICATED;
CREATE
insert into target_session_id_t values(current_setting('gp_session_id')::int);
INSERT 1

create table idle_gang_cleaner_t (c1 int, c2 int);
CREATE
select cleanupAllGangs();
 cleanupallgangs 
-----------------
 t               
(1 row)

0U: select gp_inject_fault('proc_kill', 'suspend', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

select count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2) ;
 count 
-------
 0     
(1 row)
-- Start a new session to wait_until_triggered, avoid wait_until_triggered blocking IdleGangTimeoutHandler.
0U: select gp_inject_fault('proc_kill', 'wait_until_triggered', '','','', 1, 1, 1, 2 ,target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

select count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2) ;
 count 
-------
 0     
(1 row)

0U: select gp_inject_fault('proc_kill', 'reset', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

-- Release idle Reader gangs in transaction or transaction block
select cleanupAllGangs();
 cleanupallgangs 
-----------------
 t               
(1 row)
0U: select gp_inject_fault('proc_kill', 'suspend', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)

begin;
BEGIN
select count(*) from idle_gang_cleaner_t a join idle_gang_cleaner_t b using (c2) ;
 count 
-------
 0     
(1 row)
0U: select gp_inject_fault('proc_kill', 'wait_until_triggered', '','','', 1, 1, 1, 2 ,target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)
0U: select gp_inject_fault('proc_kill', 'reset', 2, target_session_id) from target_session_id_t;
 gp_inject_fault 
-----------------
 Success:        
(1 row)
end;
END

select idle_gang_pressure_test();
 idle_gang_pressure_test 
-------------------------
                         
(1 row)

drop table target_session_id_t;
DROP
drop table idle_gang_cleaner_t;
DROP
reset gp_vmem_idle_resource_timeout;
RESET
reset gp_snapshotadd_timeout;
RESET
